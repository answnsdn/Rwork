set.seed(1222)#100은 key값 - 실행한 랜덤수를 찾아가게 해준다.
a <- sample(1:10,size=3,replace = T)#replace: FALSE일 때 중복 안함 / TRUE일 때 중복 가능
a
set.seed(150)#100은 key값 - 실행한 랜덤수를 찾아가게 해준다.
a <- sample(1:10,size=3,replace = T)#replace: FALSE일 때 중복 안함 / TRUE일 때 중복 가능
a
set.seed(150)#100은 key값 - 실행한 랜덤수를 찾아가게 해준다.
a <- sample(1:10,size=3,replace = T)#replace: FALSE일 때 중복 안함 / TRUE일 때 중복 가능
a
set.seed(3000)#100은 key값 - 실행한 랜덤수를 찾아가게 해준다.
a <- sample(1:10,size=3,replace = T)#replace: FALSE일 때 중복 안함 / TRUE일 때 중복 가능
a
set.seed(1500)#100은 key값 - 실행한 랜덤수를 찾아가게 해준다.
a <- sample(1:10,size=3,replace = T)#replace: FALSE일 때 중복 안함 / TRUE일 때 중복 가능
a
set.seed(1501)#100은 key값 - 실행한 랜덤수를 찾아가게 해준다.
a <- sample(1:10,size=3,replace = T)#replace: FALSE일 때 중복 안함 / TRUE일 때 중복 가능
a
set.seed(1500)#100은 key값 - 실행한 랜덤수를 찾아가게 해준다.
a <- sample(1:10,size=3,replace = T)#replace: FALSE일 때 중복 안함 / TRUE일 때 중복 가능
a
#if문의 역할을 하는 함수 - ifelse
set.seed(1221)
set.seed(1221)#100은 key값 - 실행한 랜덤수를 찾아가게 해준다.
a <- sample(1:10,size=3,replace = T)#replace: FALSE일 때 중복 안함 / TRUE일 때 중복 가능
a
#if문의 역할을 하는 함수 - ifelse
set.seed(1221)
ifdf <- data.frame(mynum=1:6,
myval=sample(c("spring","bigdata","android"),size = 6,replace = T)
)
ifdf
set.seed(1221)#100은 key값 - 실행한 랜덤수를 찾아가게 해준다.
a <- sample(1:10,size=3,replace = T)#replace: FALSE일 때 중복 안함 / TRUE일 때 중복 가능
a
#if문의 역할을 하는 함수 - ifelse
set.seed(1221)
ifdf <- data.frame(mynum=1:6,
myval=sample(c("spring","bigdata","android"),size = 6,replace = T)
)
ifdf
#if문의 역할을 하는 함수 - ifelse
set.seed(1221)
ifdf <- data.frame(mynum=1:6,
myval=sample(c("spring","bigdata"),size = 6,replace = T)
)
ifdf
#myval의 값이 spring이면 프로젝트 완료, bigdata이면 할꺼야 출력
for(i in 1:nrow(ifdf)){
if(ifdf[i,"myval"]=="spring"){
ifdf[i,"info"] <- "프로젝트 완료"
}else{
ifdf[i,"info"] <- "할꺼야"
}
}
ifdf
#함수를 이용해 반복하기- info2
ifdf[,"info2"] <- ifelse(ifdf$myval=="spring","쉽다","아니다")
ifdf
#if문의 역할을 하는 함수 - ifelse
set.seed(1221)
ifdf <- data.frame(mynum=1:6,
myval=sample(c("spring","bigdata","android"),size = 6,replace = T)
)
ifdf
#myval의 값이 spring이면 프로젝트 완료, bigdata이면 할꺼야 출력
for(i in 1:nrow(ifdf)){
if(ifdf[i,"myval"]=="spring"){
ifdf[i,"info"] <- "프로젝트 완료"
}else{
ifdf[i,"info"] <- "할꺼야"
}
}
ifdf
#함수를 이용해 반복하기- info2
ifdf[,"info2"] <- ifelse(ifdf$myval=="spring","쉽다","아니다")
ifdf
#조건이 두 개 이상일 때 처리하기
ifdf[,"info3"] <- ifelse(ifdf$myval=="spring","쉽다",ifelse(ifdf$myval=="bigdata","머신세팅","device세팅"))
ifdf
####step5. 생성된 total을 가지고 요약정보 확인####
summary(mpg$total)
####step6. info컬럼 추가####
#total값을 이용해서 평가 - 20이상이면 pass, fail
nrow(mpg)
ifelse(mpg$total>=20,"pass","fail")
mpg
####step6. info컬럼 추가####
#total값을 이용해서 평가 - 30이상이면 pass, fail
nrow(mpg)
mpg[,"pf"]ifelse(mpg$total>=20,"pass","fail")
####step6. info컬럼 추가####
#total값을 이용해서 평가 - 30이상이면 pass, fail
nrow(mpg)
mpg[,"pf"] <- ifelse(mpg$total>=20,"pass","fail")
mpg
mpg[,"pf"] <- ifelse(mpg$total>=30,"pass","fail")
mpg
#total값을 이용해서 평가 - 40이상이면 A, 35이상 B, 30이상 C, 나머지 D
G <- mpg$total
mpg[,"grade"] <- ifelse(G>=40,"A",ifelse(G>=35,"B",ifelse(G>=30,"C","D")))
mpg
####step6. info컬럼 추가####
#total값을 이용해서 평가 - 30이상이면 pass, fail
nrow(mpg)
mpg[,"info"] <- ifelse(mpg$total>=30,"pass","fail")
mpg
#total값을 이용해서 평가 - 40이상이면 A, 35이상 B, 30이상 C, 나머지 D
G <- mpg$total
mpg[,"grade"] <- ifelse(G>=40,"A",ifelse(G>=35,"B",ifelse(G>=30,"C","D")))
mpg
mpg[,-c(,14)]
mpg[,-14]
mpg
mpg<- -mpg[,14]
mpg<- -mpg[,-14]
mpg<- mpg[,-14]
mpg
table(exam$eng)
exam <- read.csv("csv_exam.csv")
exam
head(exam,n=10)#전체 레코드의 맨 '위'부터 정의한 개수만큼 가져오기(기본:6개)
tail(exam,n=5)#전체 레코드의 맨 '밑'에서부터 가져오기
#실제 뷰어로 보기
View(exam)
summary(exam)#데이터 요약정보
#컬럼에 이름을 변경하기 - dplyr
install.packages("dplyr")
library("dplyr")
exam <- rename(exam,eng=english)
install.packages("dplyr")
install.packages("dplyr")
exam
table(exam$eng)
qplot()
qplot(exam$eng)
library("dplyr")
library("ggplot2")
exam <- rename(exam,eng=english)
exam
table(exam$eng)
qplot(exam$eng)
library("qqplot2")
library("qqplot2")
install.packages("qqplot2")
library("qqplot2")
install.packages("qqplot2")
library("ggplot2")
midwest
midwet <- as.data.frame(midwest)
midwet
?
?midwest
midwest <- rename(midwet,poptotal=total)
midwest <- rename(midwet,total=poptotal)
midwest
head(midwest)
midwest <- rename(midwest, asian=popasian)
head(midwest)
midwest$percent <- (midwest$asian/midwest$total)*100
midwest
head(midwest)
qplot(midwest)
qplot(midwest,x=country,y=total)
qplot(data=midwest,x=country,y=total)
qplot(midwest$county,midwest$total,data=midwest)
qplot(data=midwest)
head(midwest)
qplot(data=midwest)
qplot(midwest$percent)
qplot(midwest$county,midwest$percent)
qplot(midwest$county,midwest$percent,geom = "line")
qplot(head(midwest$county),head(midwest$percent),geom = "line")
qplot(midwest$county,midwest$percent,geom = "line",n=10)
qplot(midwest$county,midwest$percent,geom = "line")
midwest$LS <- ifelse(midwest$percent>sum(midwest$percent)/nrow(midwest),"large","small")
midwest
head(midwest)
table(midwest$LS)
qplot(midwest$LS)
class(num1)
#수치형 변수
#정수 - integer(int), R에서 다루는 모든 숫자 - numeric
num1 = 10
class(num1)
num2 = 10L
class(num2)
result = num1
#수치형 변수
#정수 - integer(int), R에서 다루는 모든 숫자 - numeric
num1 <-  10
class(num1)
num2 <-  10L
class(num2)
result <-  num1
result <-  num1 + num2
result
class(result)
data(package="MASS") #R내부의 샘플 데이터 셋을 가져오기
library(MASS)
data("Boston")
head(Boston)
colnames(Boston)
t(t(colnames(Boston)))
data(package="MASS") #R내부의 샘플 데이터 셋을 가져오기
library(MASS)
data("Boston")
head(Boston)
t(colnames(Boston))
t(t(colnames(Boston)))
df <- head(Boston[,1:7])
df
#반복작업을 할 때 사용할 수 있도록 함수를 지원
#margin = 1 => 행방향으로 계산, margin = 2 => 열방향
df[,"total"] <- apply(x=df, margin = 1,FUN = "sum")
#반복작업을 할 때 사용할 수 있도록 함수를 지원
#margin = 1 => 행방향으로 계산, margin = 2 => 열방향
df[,"total"] <- apply(x = df, margin = 1,FUN = "sum")
#반복작업을 할 때 사용할 수 있도록 함수를 지원
#margin = 1 => 행방향으로 계산, margin = 2 => 열방향
df[,"total"] <- apply(X= df, margin = 1,FUN = "sum")
#반복작업을 할 때 사용할 수 있도록 함수를 지원
#margin = 1 => 행방향으로 계산, margin = 2 => 열방향
df[,"total"] <- apply(X= df, MARGIN = 1,FUN = "sum")
df[,"avg"] <- apply(X = df, MARGIN = 1, FUN = "mean")
round(apply(X = df, MARGIN = 2,FUN = "sum"),4)
df
#반복작업을 할 때 사용할 수 있도록 함수를 지원
#margin = 1 => 행방향으로 계산, margin = 2 => 열방향
df[,"total"] <- apply(X= df, MARGIN = 1,FUN = "sum")
df[,"avg"] <- apply(X = df, MARGIN = 1, FUN = "mean")
round(apply(X = df, MARGIN = 2,FUN = "sum"),4)
round(apply(X = df, MARGIN = 2,FUN = "mean"),4)
#apply의 margin속성을 2로 정의
apply(X = df, MARGIN = 2,FUN = "mean")
sapply(X = df, FUN = "mean")
t(t(sapply(X = df, FUN = "mean")))
df
df
library(MASS)
data("Boston")
head(Boston)
#주어진 데이터에서 원하는 데이터만 추출
#dplyr은 문자열에 대한 작업에 특화된 기능이 많은 패키지
#c++로 구현되어 있어 가장 빠르다
#dplyr라이브러리는 실행할 때 코드 전체를 범위 지정해서 실행
library("dplyr")
data("airquality")
head("airquality")
head(airquality)
df2 <- airquality
df2
#필터링 - 벡터연산
df2[,1:4]
#필터링 - 벡터연산
head(df2[,1:4])
df2_data1 <- df2[1:5,]
df2_data1
df2[df2$Day==1]
df2[df2$Day==1,]
df2$Day==1
#in 연산자
sum(df2$Day %in% 1:2)
#in 연산자
sum(df2$Day %in% 1:2)
df2_data2 <- df2[df2$Day %in% 1:2,]
df2_data2
nrow(df2_data2)
#dplyr패키지에서 지원하는 필터관련 함수
filter(df2,Day==1 & month==5)
#dplyr패키지에서 지원하는 필터관련 함수
filter(df2,Day==1 & Month==5)
filter(df2,Day %in% c(1,3,5))
#in 연산자
sum(df2$Day %in% 1:2)
df2$Day==1
#in 연산자
sum(df2$Day %in% 1:2)
#in 연산자
df2
#in 연산자
head(df2)
df2$Day
df2$Day %in% 1:2
df2_data2 <- df2[df2$Day %in% 1:2,]
df2_data2
nrow(df2_data2)
library("dplyr")
library("dplyr")
exam <- read.csv("csv_exam.csv")
exam
exam %>% filter(class==1)
exam %>% filter(class==1)
exam <- filter(class==1)
exam <- filter(class:1)
read.csv("csv_exam.csv") %>% filter(class==1)
exam %>% filter(class==1, math>=50)
filter(math>=50)
exam %>% filter(class==1) %>%
filter(math>=50)
#select
exam %>% select(-math)
#arrange
exam %>% arrange(id)
exam %>% arrange(desc(id)
exam %>% arrange(desc(id))
exam %>% arrange(desc(id))
exam %>% arrange(class,desc(eng)
exam %>% arrange(class,desc(eng))
exam %>% arrange(class,desc(eng))
exam %>% arrange(class,desc(english))
%>% head()
%>% head()
#mutate - 파생변수 추가하기 (원본에 없는 컬럼 추가)
exam %>% mutate(total=math+english+science) %>%
head()
#mutate - 파생변수 추가하기 (원본에 없는 컬럼 추가)
exam %>% mutate(total=math+english+science,mean=total/3) %>%
head()
#mutate - 파생변수 추가하기 (원본에 없는 컬럼 추가)
exam %>% mutate(total=math+english+science,mean=total/3,head())
#mutate - 파생변수 추가하기 (원본에 없는 컬럼 추가)
exam %>% mutate(total=math+english+science,mean=total/3) %>% head()
#mutate - 파생변수 추가하기 (원본에 없는 컬럼 추가)
exam %>% mutate(total=math+english+science,mean=total/3,info=ifelse(science>=70,"통과","재시험험")) %>% head()
#mutate - 파생변수 추가하기 (원본에 없는 컬럼 추가)
exam %>% mutate(total=math+english+science,mean=total/3,info=ifelse(science>=70,"통과","재시험")) %>% head()
exam %>% group_by(class)
exam %>% group_by(class) %>% sum(class())
exam %>% group_by(class) %>% sum(class
exam %>% group_by(class) %>% sum(class())
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
exam %>% summarise(class)
exam %>% group_by(class) %>%
summarise(math_sum = sum(math),
math_mean = mean(math),
math_median = median(math),
math_count = count(math)
)
#mutate - 파생변수 추가하기 (원본에 없는 컬럼 추가)
exam %>% mutate(total=math+english+science,mean=total/3,info=ifelse(science>=70,"통과","재시험")) %>% head()
exam %>% group_by(class) %>%
summarise(math_sum = sum(math),
math_mean = mean(math),
math_median = median(math),
math_count = count(math)
)
exam %>% group_by(class) %>%
summarise(math_sum = sum(math),
math_mean = mean(math),
math_median = median(math),
math_count = n()
)
exam %>%
summarise(math_sum = sum(math),
math_mean = mean(math),
math_median = median(math),
math_count = n()
)
exam %>% group_by(class) %>%
summarise(math_sum = sum(math),
math_mean = mean(math),
math_median = median(math),
math_count = n()
)
test1 <- data.frame(id=c(1,2,3,4,5),
mid_jumsu=c(77,56,99,100,99))
test2 <- data.frame(id=c(1,2,3,4,5),
final_jumsu=c(77,56,99,100,99))
test1
test2
#두 개의 data 열 방향으로 합치기 : left_join(data1,data2,by=기준(키))
final_data <- left_join(test1,test2,id)
#두 개의 data 열 방향으로 합치기 : left_join(data1,data2,by=기준(키))
final_data <- left_join(test1,test2,by=id)
final_data
#두 개의 data 열 방향으로 합치기 : left_join(data1,data2,by=기준(키))
final_data <- left_join(test1,test2,by=id)
final_data
test1 <- data.frame(id=c(1,2,3,4,5),
mid_jumsu=c(77,56,99,100,99))
test2 <- data.frame(id=c(1,2,3,4,5),
final_jumsu=c(77,56,99,100,99))
test1
test2
#두 개의 data 열 방향으로 합치기 : left_join(data1,data2,by=기준(키))
final_data <- left_join(test1,test2,by=id)
final_data
#두 개의 data 열 방향으로 합치기 : left_join(data1,data2,by=기준(키))
final_data <- left_join(test1,test2,by="id")
final_data
#두 개의 data 열 방향으로 합치기 : left_join(data1,data2,by=기준(키))
final_data <- left_join(test1,test2,"id")
final_data
namedata <- data.frame(class=c(1,2,3,4,5),teacher=c("kim","lee","park","jang","hong"))
namedata
str(namedata)
#data.frame을 이용해 문자를 삽입하면 구조가 Factor타입이므로 문제가 생길수 있다.
#        ==> StringAsFactor=F로 통해 chr로 바꾼다.
namedata <- data.frame(class=c(1,2,3,4,5),teacher=c("kim","lee","park","jang","hong"),stringsAsFactors = F)
str(namedata)
exam_new <- left_join(exam,namedata,"class")
exam_new
groupB <- data.frame(id=c(6,7,8,9,10),
mid_jumsu=c(77,56,99,100,99))
groupA <- data.frame(id=c(1,2,3,4,5),
mid_jumsu=c(77,56,99,100,99))
groupB <- data.frame(id=c(6,7,8,9,10),
mid_jumsu=c(77,56,99,100,99))
groupTotal <- bind_rows(groupA,groupB)
groupTotal
####p.157 예제####
fuel <- data.frame(fl=c("c","d","e","p","r"),
price_fl=c(2.35,2.38,2.11,2.76,2.22),
stringsAsFactors = F
)
fuel
head(mpg)
joinmpg <- left_join(fuel,mpg,"fl")
joinmpg
head(join)
head(joinmpg)
head(joinmpg)
joinmpg %>% select(model,fl,price_fl) %>% head()
joinmpg %>% select(model,fl,price_fl) %>% head(5)
####p.150 예제####
mpg
####p.150 예제####
mpg %>% group_by(class)
####p.150 예제####
mpg %>% group_by(class) %>%
summarise(mpg,mean(city))
####p.150 예제####
mpg %>% group_by(class) %>%
summarise(mean(city))
####p.150 예제####
mpg %>% group_by(class) %>%
summarise(avg,mean(city))
####p.150 예제####
mpg %>% group_by(class) %>%
summarise(avg=mean(city))
mpg %>% select(city)
mpg %>% arrange(city)
mpg %>% group_by(class) %>%
summarise(avg=mean(city)) %>%
arrange(city)
####p.150 예제####
mpg %>% group_by(class) %>%
summarise(avg=mean(city))
mpg %>% group_by(class) %>%
summarise(avg=mean(city)) %>%
arrange(city)
####p.150 예제####
mpg %>% group_by(class) %>%
summarise(avg=mean(city))
mpg %>% group_by(class) %>%
summarise(avg=mean(city)) %>%
arrange(avg)
arrange(desc(avg)
mpg %>% group_by(class) %>%
arrange(desc(avg)
mpg %>% group_by(class) %>%
summarise(avg=mean(city)) %>%
arrange(desc(avg))
mpg %>% group_by(class) %>%
summarise(avg=mean(city)) %>%
arrange(desc(avg))
####p.157 예제####
fuel <- data.frame(fl=c("c","d","e","p","r"),
price_fl=c(2.35,2.38,2.11,2.76,2.22),
stringsAsFactors = F
)
mpg %>% group_by(manufacturer) %>% arrange(hwy)
mpg %>% group_by(manufacturer)
mpg %>% group_by(manufacturer) %>% arrange(highway)
mpg %>% group_by(manufacturer) %>% summarise(hwyavg=mean(highway)) %>%  arrange(hwyavg)
mpg %>% group_by(manufacturer) %>% summarise(hwyavg=mean(highway)) %>%  arrange(desc(hwyavg))
mpg %>% group_by(manufacturer) %>% summarise(hwyavg=mean(highway)) %>%  arrange(desc(hwyavg),3)
mpg %>% group_by(manufacturer) %>% summarise(hwyavg=mean(highway)) %>%  arrange(hwyavg) %>% tail(3)
mpg %>% group_by(manufacturer) %>% summarise(hwyavg=mean(highway)) %>%  arrange(desc(hwyavg)) %>% head(3)
mpg
#data.frame을 이용해 문자를 삽입하면 구조가 Factor타입이므로 문제가 생길수 있다.
#        ==> StringAsFactor=F로 통해 chr로 바꾼다.
namedata <- data.frame(class=c(1,2,3,4,5),teacher=c("kim","lee","park","jang","hong"),stringsAsFactors = F)
mpg %>% group_by(manufacturer)
mpg %>% group_by(manufacturer) %>% summarise(compact=count(class))
mpg %>% group_by(manufacturer) %>% summarise(compact=count("compact"))
mpg %>% group_by(manufacturer) %>% summarise(compact=n())
mpg %>% group_by(manufacturer) %>% summarise(compact=n(compact))
mpg %>% group_by(manufacturer) %>% summarise(compact=n("compact"))
mpg %>% group_by(manufacturer) %>% summarise(compact=n())
mpg %>% group_by(manufacturer) %>% summarise(compact=n())
mpg %>% filter(mpg,"compact")
mpg %>% filter(class=="compact")
mpg %>% filter(class="compact")
=####p.157 예제####
fuel <- data.frame(fl=c("c","d","e","p","r"),
price_fl=c(2.35,2.38,2.11,2.76,2.22),
stringsAsFactors = F
)
=
mpg %>% filter(class=="compact")
mpg %>% filter(class=="compact") %>% group_by(manufacturer)
mpg %>% filter(class=="compact") %>% group_by(manufacturer) %>% summarise(compact=n())
mpg %>% filter(class=="compact") %>% group_by(manufacturer) %>% summarise(compact=n()) %>% arrange(desc(compact))
mpg %>% group_by(class) %>%
summarise(avg=mean(city))
mpg %>% group_by(class) %>%
summarise(avg=mean(city)) %>%
arrange(desc(avg))
mpg %>% group_by(manufacturer) %>% summarise(hwyavg=mean(highway)) %>%  arrange(desc(hwyavg)) %>% head(3)
mpg %>% filter(class=="compact") %>% group_by(manufacturer) %>% summarise(compact=n()) %>% arrange(desc(compact))

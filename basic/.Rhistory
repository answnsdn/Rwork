print(result)
}
for (i in plus) {
result[i,6] <- sum(result[i,3:5])
print(result)
}
result
}
result
avg <- as.matrix(result)
for (i in plus) {
result[i,7] <- mean(avg[i,3:5])
print(result)
}
plus <- c(1:4)
for (i in plus) {
result[i,6] <- sum(result[i,3:5])
}
result
avg <- as.matrix(result)
for (i in plus) {
result[i,7] <- mean(avg[i,3:5])
}
avg_frame <- data.frame(myavg)
result
avg <- as.matrix(result)
for (i in plus) {
result[i,7] <- mean(avg[i,3:5])
}
result
result
plus <- c(1:4)
avg <- as.matrix(result)
for (i in plus) {
result[i,6] <- sum(result[i,3:5])
result[i,7] <- mean(avg[i,3:5])
}
result
result
CSV_EXAM <- result
result
CSV_EXAM <- data.frame(result)
CSV_EXAM <- data.frame(result)
CSV_EXAM
result <- result_exam[result_exam$science>=80,]
result
for (i in result$id) {
result[i,6] <- sum(result[i,3:5])
result[i,7] <- mean()
}
for (id in result$id) {
print(id)
}
for (id in result$id) {
print(result$math)
}
result
for (id in result$id) {
result[id,6] <- sum(result[id,3:5])
result[id,7] <- mean()
}
for (id in result$id) {
result[id,6] <- sum(result[id,3:5])
result[id,7] <- mean()
}
result
result
c <- result$id
c
c <- result$id
c
for (i in c) {
result[id,6] <- sum(result[id,3:5])
print(result)
}
result
c <- result$id
c
for (i in c) {
result[i,6] <- sum(result[i,3:5])
print(result)
}
for (i in 4) {
result[i,6] <- sum(result[i,3:5])
print(result)
}
result_exam <- data.frame(csv_exam)
result_exam
result <- result_exam[result_exam$science>=80,]
result
for (i in 4) {
result[i,6] <- sum(result[i,3:5])
print(result)
}
for (i in nrow(result)) {
result[i,6] <- sum(result[i,3:5])
print(result)
}
for (i in nrow(result)) {
result[i,6] <- sum(result[i,3:5])
print(result)
}
coutnrow
result
countrow <- c(1:nrow(result))
coutnrow
result
countrow <- [1:nrow(result)]
coutnrow
result <- result_exam[result_exam$science>=80,]
result
countrow <- c(1:nrow(result))
coutnrow
result
coutrow <- nrow(result)
coutnrow
result
coutrow <- nrow(result_exam)
result <- result_exam[result_exam$science>=80,]
result
coutrow <- nrow(result_exam)
coutrow
coutrow <- nrow(result)
coutrow
result
coutrow <- c(1:nrow(result))
coutrow
coutrow
for (i in countrow) {
result[i,6] <- sum(result[i,3:5])
print(result)
}
coutrow
for (i in countrow) {
result[i,6] <- sum(result[i,3:5])
result[i,7] <- mean((result$math+result$english+result$science)/3)
}
result
result
coutrow <- c(1:nrow(result))
coutrow
for (i in countrow) {
result[i,6] <- sum(result[i,3:5])
result[i,7] <- mean(result[i,(result$math+result$english+result$science)/3])
}
result
coutrow
for (i in countrow) {
result[i,6] <- sum(result[i,3:5])
result[i,7] <- mean((result$math+result$english+result$science)/3)
}
result
result
coutrow <- c(1:nrow(result))
coutrow
for (i in countrow) {
result[i,6] <- sum(result[i,3:5])
result[i,7] <- mean(i,(result$math+result$english+result$science)/3)
}
coutrow <- c(1:nrow(result))
coutrow
for (i in countrow) {
result[i,6] <- sum(result[i,3:5])
result[i,7] <- mean(result[i,6]/3)
}
result
result
coutrow <- c(1:nrow(result))
coutrow
for (i in countrow) {
result$total <- result$math+result$english+result$science
result[i,7] <- mean(result[i,6]/3)
}
result
coutrow <- c(1:nrow(result))
coutrow
for (i in countrow) {
result$total <- result$math+result$english+result$science
result$avg <- result$total/3
}
result
result
result
rownames(V6) <- NULL
rownames(V7) <- NULL
result
result
rownames(result$V6) <- NULL
rownames(result$V7) <- NULL
result
result
rownames(result$V6) <- NULL
rownames(result$V7) <- NULL
result
coutrow
for (i in countrow) {
result$total <- result$math+result$english+result$science
result$avg <- result$total/3
}
result
rownames(result$V6) <- NULL
rownames(result$V7) <- NULL
result
result <- result[,-c(5:6)]
coutrow
for (i in countrow) {
result$total <- result$math+result$english+result$science
result$avg <- result$total/3
}
result
rownames(result$V6) <- NULL
rownames(result$V7) <- NULL
result
result <- result[,-c(5:6)]
result
result
csv_exam <- read.csv("csv_exam.csv")
csv_exam
result_exam <- data.frame(csv_exam)
result_exam
result <- result_exam[result_exam$science>=80,]
result
coutrow <- c(1:nrow(result))
coutrow
for (i in countrow) {
result$total <- result$math+result$english+result$science
result$avg <- result$total/3
}
result
csv_exam <- read.csv("csv_exam.csv")
csv_exam
result_exam <- data.frame(csv_exam)
result_exam
result <- result_exam[result_exam$science>=80,]
result
coutrow <- c(1:nrow(result))
coutrow
for (i in countrow) {
result$total <- result$math+result$english+result$science
result$avg <- result$total/3
}
result
result
write.csv(result,file = "CSVExam.csv")
result$avg <- result$total/3
for (i in countrow) {
result$total <- result$math+result$english+result$science
result$avg <- result$total/3
}
result
write.csv(result,file = "CSVExam.csv")
csv_exam <- read.csv("csv_exam.csv")
csv_exam
result_exam <- data.frame(csv_exam)
result_exam
result <- result_exam[result_exam$science>=80,]
result
coutrow <- c(1:nrow(result))
coutrow
for (i in countrow) {
result$total <- result$math+result$english+result$science
result$avg <- result$total/3
}
result
write.csv(result,file = "CSVExam.csv")
csv_exam <- read.csv("csv_exam.csv")
csv_exam
result_exam <- data.frame(csv_exam)
result_exam
result <- result_exam[result_exam$science>=80,]
result
#coutrow <- c(1:nrow(result))
#coutrow
#for (i in countrow) {
result$total <- result$math+result$english+result$science
result$avg <- result$total/3
#}
result
#R에서 제공되는 함수를 이용할 수 있다.
#Class함수 : 타입을 확인
class(result1) #숫자 : numeric
class(result2) #글자 : character
#as.---함수 : 원하는 ---타입으로 바꿔준다.
test <- as.character(result1)
test
class(test)
test <- as.numeric(result1)
test
#coutrow <- c(1:nrow(result))
#coutrow
#for (i in countrow) {
#for문을 안쓰더라도 각 행을 결과값이 출력된다.
result$total <- sum(result$math,result$english,result$science)
result$avg <- result$total/3
#}
result
#coutrow <- c(1:nrow(result))
#coutrow
#for (i in countrow) {
#for문을 안쓰더라도 각 행을 결과값이 출력된다.
result$total <-result$math+result$english+result$science
result$avg <- result$total/3
#}
result
#조건을 이용해 나머지 연산
numlist[numlist %%2==0]#짝수구하기
numlist[numlist %%2==1]#홀수구하기
numlist
#나머지 연산
numlist %%2==0#'%%':나머지 구하기 - 1부터 100중 TRUE/FALSE 출력
numlist
#시퀀스 함수
numlist2 <- seq(1,10)
numlist2
#시퀀스 함수 조건주기
numlist2 <- seq(1,10,by = 2) #by : 간격을 지정하는 함수
numlist2
#행렬 기본
matrix(1:15)
#ncol : 열개수 표시,기본적으로 행방향 데이터 출력
mymat1 <- matrix(1:15,ncol = 3)
mymat1
mymat1 <- matrix(1:15,ncol = 3,byrow =T)#byrow : 열방향으로 데이터 출력
mymat1
#matrix에서 원하는 값을 추출하기
mymat1[2,2] #행,열
mymat1[3,3]
mymat1[1,c(1:3)]
mymat1[1,1:3]
mymat1[1,]#1행의 모든 열 출력하기
mymat1[,1]#1열의 모든 행 출력하기
mymat1[-c(1,3),]#1,3행을 뺀 데이터 출력
mymat1[c(1,3),]
mymat1[2:4,2:3]
#cbind - 열(column)추가하기
cbind(mymat1,c(1,11,111,1111))#값이 부족하면 값이 반복됨.
#cbind - 열(column)추가하기
cbind(mymat1,c(1,11,111,1111))#값이 부족하면 값이 반복됨.
#rbind - 행(row)추가하기
addmymat1 <- rbind(mymat1,c(1,11,111))
#cbind - 열(column)추가하기
cbind(mymat1,c(1,11,111,1111))#값이 부족하면 값이 반복됨.
mymat1
mymat1[,1]#1열의 모든 행 출력하기
mymat1[-c(1,3),]#1,3행을 뺀 데이터 출력
mymat1[c(1,3),]
mymat1[2:4,2:3]
#cbind - 열(column)추가하기
cbind(mymat1,c(1,11,111,1111))#값이 부족하면 값이 반복됨.
#cbind - 열(column)추가하기
cbind(mymat1,c(1,11,111))#값이 부족하면 값이 반복됨.
#rbind - 행(row)추가하기
addmymat1 <- rbind(mymat1,c(1,11,111))
#rbind - 행(row)추가하기
addmymat1 <- rbind(mymat1,c(1,11,111))
addmymat1
mymat1
rownames(mymat1) <- c("1","2","3","4","5")
mymat1
source('C:/iot/work/Rwork/Matrix.R', encoding = 'UTF-8')
#행렬에 이름주기
colnames(mymat1) <- c("a","b","c")
mymat1
mymat1
rownames(mymat1) <- c("1","2","3","4","5")
mymat1
mymat1
mean(mymat1)#평균구하기
#데이터프레임 기초
dataframeMat1 <- matrix(1:15,ncol = 3,byrow =T)
dataframeMat1
dataframeMat2 <- data.frame(dataframeMat1)
dataframeMat2
dataframeMat1[,1]
dataframeMat2[,1]
#str함수 - dataframe내부의 데이터형을 볼 수 있는 함수
str(dataframeMat1)
#str함수 - dataframe내부의 데이터형을 볼 수 있는 함수
str(dataframeMat1)
dataframeMat2[,1] <- as.character(dataframeMat1[,1])
str(dataframeMat2)
dataframeMat2
#"$"를 이용해서 열의 이름을 접근할 수 있다.
dataframeMat1$x1
#"$"를 이용해서 열의 이름을 접근할 수 있다.
dataframeMat2$x1
#dataframe에 열 추가하기
dataframeMat2$x4 <- col4
#dataframe에 열 추가하기
dataframeMat2$x4 <- col4
dataframeMat2
#"$"를 이용해서 열의 이름을 접근할 수 있다.
dataframeMat2$x1
#dataframe에 열 추가하기
dataframeMat2$x4 <- 10
dataframeMat2
#"$"를 이용해서 열의 이름을 접근할 수 있다.
dataframeMat2$x1
#dataframe에 열 추가하기
dataframeMat2$x4 <- c(10,20,30,40)
dataframeMat2
#"$"를 이용해서 열의 이름을 접근할 수 있다.
dataframeMat2$x1
#dataframe에 열 추가하기
dataframeMat2$x4 <- c(10,20,30,40,50)
dataframeMat2
dataframeMat2
dataframeMat2$x4 <- 10
dataframeMat2
dataframeMat2$x4 <- 10
dataframeMat2
dataframeMat2$x4 <- "문자형"
dataframeMat2
#필요한 곳에서 dataframe을 다시 matrix로 변환
dataframeMat2 <- as.matrix(dataframeMat1)
dataframeMat2
sum(avg)
sum(result)
#}
result
sum(result,1)
sum(1,1)
#coutrow <- c(1:nrow(result)) nrow : 행개수 구하는 함수
#coutrow
#for (i in countrow) {
#for문을 안쓰더라도 각 행을 결과값이 출력된다.
result$total <- sum(result$math,result$english)
result$avg <- result$total/3
#}
result
sum(1,1)
sum(result$math,result$english)
sum(1,1)
sum(result$math,result$english,result$science)
#coutrow <- c(1:nrow(result)) nrow : 행개수 구하는 함수
#coutrow
#for (i in countrow) {
#for문을 안쓰더라도 각 행을 결과값이 출력된다.
result$total <- result$math+result$english+result$science
result$avg <- result$total/3
#}
result
#필요한 곳에서 dataframe을 다시 matrix로 변환
dataframeMat2 <- as.matrix(dataframeMat1)
dataframeMat2
#dataframe 만들기
eng <- c(100,99,90)
math <- c(100,99,100)
mydf1 <- data.frame(eng,math)
mydf1
mydf1 <- data.frame(eng,math)
#"$"를 이용해서 이름별 평균구하기
mean(mydf1$eng)
mean(mydf1$math)
#dataframe 직접 정의하기
mydf2 <- data.frame(eng=c(100,100,100),m=c(90,99,80))
mydf2
product <- c("사과","딸기","수박")
price <- c(1800,1500,3000)
count <- c(24,38,13)
frame <- data.frame(product,price,count)
frame
colnames(frame$product) <- c("제품")
frame
frame
mean(frame$price)
mean(frame$count)
frame <- t(frame)
frame
frame
제품 <- c("사과","딸기","수박")
frame <- data.frame(제품)
frame
frame <- data.frame(제품)
frame
frame
colnames(frame$product) <- c("제품")#colnames함수는 Matrix에서 쓴다.
frame
mean(frame$price)
mean(frame$count)
frame <- as.matrix(frame)
frame
colnames(frame) <- c("제품","제품","제품")
colnames(frame) <- c("제품","제품")
colnames(frame$product) <- c("제품")#colnames함수는 Matrix에서 쓴다.
colnames(frame) <- c("제품")#colnames함수는 Matrix에서 쓴다.
frame
count <- c(24,38,13)
frame <- data.frame(product,price,count)
frame
str(frame)
colnames(frame) <- c("제품")#colnames함수는 Matrix에서 쓴다.
str(frame)
frame
str(frame)
count <- c(24,38,13)
frame <- data.frame(product,price,count)
frame
str(frame)
str(frame)
colnames(frame$product) <- "제품"
str(frame)
colnames(frame$product) <- c("제품")#이렇게 쓸 수 없다.
str(frame)
colnames(frame$product) <- c("제품")#이렇게 쓸 수 없다.
colnames(frame) <- c("제품","가격","판매량")
str(frame)
colnames(frame$product) <- c("제품")#이렇게 쓸 수 없다.
colnames(frame) <- c("제품","가격","판매량")
colnames(frame) <- c("제품","가격","판매량")#이렇게 써야함
str(frame)
frame
